// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 77VYuwNTZafJr81o7gYYZM
// Component: LSlExaVZiKH_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 77VYuwNTZafJr81o7gYYZM/projectcss
import sty from "./PlasmicNewPage.module.css"; // plasmic-import: LSlExaVZiKH_/css

import Placeholder3Icon from "./icons/PlasmicIcon__Placeholder3"; // plasmic-import: 7B1aX7W5fw0D/icon
import SocialIcon3Icon from "./icons/PlasmicIcon__SocialIcon3"; // plasmic-import: 5I2XOKrwg62D/icon
import SocialIcon4Icon from "./icons/PlasmicIcon__SocialIcon4"; // plasmic-import: tNNA7sjtcdb6/icon

createPlasmicElementProxy;

export type PlasmicNewPage__VariantMembers = {};
export type PlasmicNewPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage__VariantsArgs;
export const PlasmicNewPage__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage__ArgsType;
export const PlasmicNewPage__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage__OverridesType = {
  root?: Flex__<"div">;
  logIn?: Flex__<"div">;
  backgroundPatternDecorative?: Flex__<"div">;
  content?: Flex__<"div">;
  lines?: Flex__<"div">;
  container?: Flex__<"div">;
  content2?: Flex__<"div">;
  header?: Flex__<"div">;
  logomark?: Flex__<"div">;
  content3?: Flex__<"div">;
  blur?: Flex__<"div">;
  textAndSupportingText?: Flex__<"div">;
  text?: Flex__<"div">;
  supportingText?: Flex__<"div">;
  horizontalTabs?: Flex__<"div">;
  tabButtonBase?: Flex__<"div">;
  text2?: Flex__<"div">;
  badge?: Flex__<"div">;
  text3?: Flex__<"div">;
  tabButtonBase2?: Flex__<"div">;
  text4?: Flex__<"div">;
  badge2?: Flex__<"div">;
  text5?: Flex__<"div">;
  tabButtonBase3?: Flex__<"div">;
  text6?: Flex__<"div">;
  badge3?: Flex__<"div">;
  text7?: Flex__<"div">;
  tabButtonBase4?: Flex__<"div">;
  text8?: Flex__<"div">;
  badge4?: Flex__<"div">;
  text9?: Flex__<"div">;
  tabButtonBase5?: Flex__<"div">;
  text10?: Flex__<"div">;
  badge5?: Flex__<"div">;
  text11?: Flex__<"div">;
  content4?: Flex__<"div">;
  form?: Flex__<"div">;
  inputField?: Flex__<"div">;
  inputWithLabel?: Flex__<"div">;
  labelWrapper?: Flex__<"div">;
  label?: Flex__<"div">;
  asterisk?: Flex__<"div">;
  input?: Flex__<"div">;
  content5?: Flex__<"div">;
  text12?: Flex__<"div">;
  helpIcon?: Flex__<"div">;
  hintText?: Flex__<"div">;
  inputField2?: Flex__<"div">;
  inputWithLabel2?: Flex__<"div">;
  labelWrapper2?: Flex__<"div">;
  label2?: Flex__<"div">;
  asterisk2?: Flex__<"div">;
  input2?: Flex__<"div">;
  content6?: Flex__<"div">;
  text13?: Flex__<"div">;
  helpIcon2?: Flex__<"div">;
  hintText2?: Flex__<"div">;
  row?: Flex__<"div">;
  checkbox?: Flex__<"div">;
  input3?: Flex__<"div">;
  checkboxBase?: Flex__<"div">;
  textAndSupportingText2?: Flex__<"div">;
  text14?: Flex__<"div">;
  supportingText2?: Flex__<"div">;
  buttonsButton?: Flex__<"div">;
  text15?: Flex__<"div">;
  actions?: Flex__<"div">;
  buttonsButton2?: Flex__<"div">;
  textPadding?: Flex__<"div">;
  text16?: Flex__<"div">;
  socialButtonGroups?: Flex__<"div">;
  socialButton?: Flex__<"div">;
  text17?: Flex__<"div">;
  socialButton2?: Flex__<"div">;
  text18?: Flex__<"div">;
  socialButton3?: Flex__<"div">;
  text19?: Flex__<"div">;
  socialButton4?: Flex__<"div">;
  text20?: Flex__<"div">;
  row2?: Flex__<"div">;
  text21?: Flex__<"div">;
  buttonsButton3?: Flex__<"div">;
  text22?: Flex__<"div">;
};

export interface DefaultNewPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewPage__RenderFunc(props: {
  variants: PlasmicNewPage__VariantsArgs;
  args: PlasmicNewPage__ArgsType;
  overrides: PlasmicNewPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const dataSourcesCtx = usePlasmicDataSourceContext();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"logIn"}
            data-plasmic-override={overrides.logIn}
            hasGap={true}
            className={classNames(projectcss.all, sty.logIn)}
          >
            {false ? (
              <div
                data-plasmic-name={"backgroundPatternDecorative"}
                data-plasmic-override={overrides.backgroundPatternDecorative}
                className={classNames(
                  projectcss.all,
                  sty.backgroundPatternDecorative
                )}
              >
                <div
                  data-plasmic-name={"content"}
                  data-plasmic-override={overrides.content}
                  className={classNames(projectcss.all, sty.content)}
                >
                  <div
                    data-plasmic-name={"lines"}
                    data-plasmic-override={overrides.lines}
                    className={classNames(projectcss.all, sty.lines)}
                  >
                    <Stack__
                      as={PlasmicImg__}
                      hasGap={true}
                      alt={""}
                      className={classNames(sty.img__d6S3P)}
                      displayHeight={"768px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"768px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/admin_panel/images/vertical.svg",
                        fullWidth: 768,
                        fullHeight: 768,
                        aspectRatio: 1
                      }}
                    />

                    <Stack__
                      as={PlasmicImg__}
                      hasGap={true}
                      alt={""}
                      className={classNames(sty.img__t9Rkv)}
                      displayHeight={"768px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"768px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/admin_panel/images/horizontal.svg",
                        fullWidth: 768,
                        fullHeight: 768,
                        aspectRatio: 1
                      }}
                    />
                  </div>
                </div>
              </div>
            ) : null}
            <Stack__
              as={"div"}
              data-plasmic-name={"container"}
              data-plasmic-override={overrides.container}
              hasGap={true}
              className={classNames(projectcss.all, sty.container)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"content2"}
                data-plasmic-override={overrides.content2}
                hasGap={true}
                className={classNames(projectcss.all, sty.content2)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"header"}
                  data-plasmic-override={overrides.header}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.header)}
                >
                  <div
                    data-plasmic-name={"logomark"}
                    data-plasmic-override={overrides.logomark}
                    className={classNames(projectcss.all, sty.logomark)}
                  >
                    <div
                      data-plasmic-name={"content3"}
                      data-plasmic-override={overrides.content3}
                      className={classNames(projectcss.all, sty.content3)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__fI6Zn)}
                        displayHeight={"48px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"48px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/admin_panel/images/grid.svg",
                          fullWidth: 48,
                          fullHeight: 48,
                          aspectRatio: 1
                        }}
                      />

                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__w6ZkA)}
                        displayHeight={"24px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"24px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/admin_panel/images/palantir.svg",
                          fullWidth: 24,
                          fullHeight: 24,
                          aspectRatio: 1
                        }}
                      />

                      <div
                        data-plasmic-name={"blur"}
                        data-plasmic-override={overrides.blur}
                        className={classNames(projectcss.all, sty.blur)}
                      />
                    </div>
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"textAndSupportingText"}
                    data-plasmic-override={overrides.textAndSupportingText}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.textAndSupportingText
                    )}
                  >
                    <div
                      data-plasmic-name={"text"}
                      data-plasmic-override={overrides.text}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text
                      )}
                    >
                      {"Log in to your account"}
                    </div>
                    <div
                      data-plasmic-name={"supportingText"}
                      data-plasmic-override={overrides.supportingText}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.supportingText
                      )}
                    >
                      {"Welcome back! Please enter your details."}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"horizontalTabs"}
                    data-plasmic-override={overrides.horizontalTabs}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.horizontalTabs)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"tabButtonBase"}
                      data-plasmic-override={overrides.tabButtonBase}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.tabButtonBase)}
                    >
                      <div
                        data-plasmic-name={"text2"}
                        data-plasmic-override={overrides.text2}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text2
                        )}
                      >
                        {"Sign up"}
                      </div>
                      {false ? (
                        <div
                          data-plasmic-name={"badge"}
                          data-plasmic-override={overrides.badge}
                          className={classNames(projectcss.all, sty.badge)}
                        >
                          <div
                            data-plasmic-name={"text3"}
                            data-plasmic-override={overrides.text3}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text3
                            )}
                          >
                            {"2"}
                          </div>
                        </div>
                      ) : null}
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"tabButtonBase2"}
                      data-plasmic-override={overrides.tabButtonBase2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.tabButtonBase2)}
                    >
                      <div
                        data-plasmic-name={"text4"}
                        data-plasmic-override={overrides.text4}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text4
                        )}
                      >
                        {"Log in"}
                      </div>
                      {false ? (
                        <div
                          data-plasmic-name={"badge2"}
                          data-plasmic-override={overrides.badge2}
                          className={classNames(projectcss.all, sty.badge2)}
                        >
                          <div
                            data-plasmic-name={"text5"}
                            data-plasmic-override={overrides.text5}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text5
                            )}
                          >
                            {"2"}
                          </div>
                        </div>
                      ) : null}
                    </Stack__>
                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"tabButtonBase3"}
                        data-plasmic-override={overrides.tabButtonBase3}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.tabButtonBase3
                        )}
                      >
                        <div
                          data-plasmic-name={"text6"}
                          data-plasmic-override={overrides.text6}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text6
                          )}
                        >
                          {"Password"}
                        </div>
                        {false ? (
                          <div
                            data-plasmic-name={"badge3"}
                            data-plasmic-override={overrides.badge3}
                            className={classNames(projectcss.all, sty.badge3)}
                          >
                            <div
                              data-plasmic-name={"text7"}
                              data-plasmic-override={overrides.text7}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text7
                              )}
                            >
                              {"2"}
                            </div>
                          </div>
                        ) : null}
                      </Stack__>
                    ) : null}
                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"tabButtonBase4"}
                        data-plasmic-override={overrides.tabButtonBase4}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.tabButtonBase4
                        )}
                      >
                        <div
                          data-plasmic-name={"text8"}
                          data-plasmic-override={overrides.text8}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text8
                          )}
                        >
                          {"Team"}
                        </div>
                        <div
                          data-plasmic-name={"badge4"}
                          data-plasmic-override={overrides.badge4}
                          className={classNames(projectcss.all, sty.badge4)}
                        >
                          <div
                            data-plasmic-name={"text9"}
                            data-plasmic-override={overrides.text9}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text9
                            )}
                          >
                            {"2"}
                          </div>
                        </div>
                      </Stack__>
                    ) : null}
                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"tabButtonBase5"}
                        data-plasmic-override={overrides.tabButtonBase5}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.tabButtonBase5
                        )}
                      >
                        <div
                          data-plasmic-name={"text10"}
                          data-plasmic-override={overrides.text10}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text10
                          )}
                        >
                          {"Plan"}
                        </div>
                        {false ? (
                          <div
                            data-plasmic-name={"badge5"}
                            data-plasmic-override={overrides.badge5}
                            className={classNames(projectcss.all, sty.badge5)}
                          >
                            <div
                              data-plasmic-name={"text11"}
                              data-plasmic-override={overrides.text11}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text11
                              )}
                            >
                              {"2"}
                            </div>
                          </div>
                        ) : null}
                      </Stack__>
                    ) : null}
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"content4"}
                  data-plasmic-override={overrides.content4}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.content4)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"form"}
                    data-plasmic-override={overrides.form}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.form)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"inputField"}
                      data-plasmic-override={overrides.inputField}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.inputField)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"inputWithLabel"}
                        data-plasmic-override={overrides.inputWithLabel}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.inputWithLabel
                        )}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"labelWrapper"}
                          data-plasmic-override={overrides.labelWrapper}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.labelWrapper
                          )}
                        >
                          <div
                            data-plasmic-name={"label"}
                            data-plasmic-override={overrides.label}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.label
                            )}
                          >
                            {"Email"}
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"asterisk"}
                              data-plasmic-override={overrides.asterisk}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.asterisk
                              )}
                            >
                              {"*"}
                            </div>
                          ) : null}
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"input"}
                          data-plasmic-override={overrides.input}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.input)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"content5"}
                            data-plasmic-override={overrides.content5}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.content5)}
                          >
                            <div
                              data-plasmic-name={"text12"}
                              data-plasmic-override={overrides.text12}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text12
                              )}
                            >
                              {"Enter your email"}
                            </div>
                          </Stack__>
                          {false ? (
                            <div
                              data-plasmic-name={"helpIcon"}
                              data-plasmic-override={overrides.helpIcon}
                              className={classNames(
                                projectcss.all,
                                sty.helpIcon
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__yWBw)}
                                displayHeight={"16px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"16px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/admin_panel/images/helpCircle.svg",
                                  fullWidth: 16,
                                  fullHeight: 16,
                                  aspectRatio: 1
                                }}
                              />
                            </div>
                          ) : null}
                        </Stack__>
                      </Stack__>
                      {false ? (
                        <div
                          data-plasmic-name={"hintText"}
                          data-plasmic-override={overrides.hintText}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.hintText
                          )}
                        >
                          {"This is a hint text to help user."}
                        </div>
                      ) : null}
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"inputField2"}
                      data-plasmic-override={overrides.inputField2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.inputField2)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"inputWithLabel2"}
                        data-plasmic-override={overrides.inputWithLabel2}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.inputWithLabel2
                        )}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"labelWrapper2"}
                          data-plasmic-override={overrides.labelWrapper2}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.labelWrapper2
                          )}
                        >
                          <div
                            data-plasmic-name={"label2"}
                            data-plasmic-override={overrides.label2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.label2
                            )}
                          >
                            {"Password"}
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"asterisk2"}
                              data-plasmic-override={overrides.asterisk2}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.asterisk2
                              )}
                            >
                              {"*"}
                            </div>
                          ) : null}
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"input2"}
                          data-plasmic-override={overrides.input2}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.input2)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"content6"}
                            data-plasmic-override={overrides.content6}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.content6)}
                          >
                            <div
                              data-plasmic-name={"text13"}
                              data-plasmic-override={overrides.text13}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text13
                              )}
                            >
                              {
                                "\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022"
                              }
                            </div>
                          </Stack__>
                          {false ? (
                            <div
                              data-plasmic-name={"helpIcon2"}
                              data-plasmic-override={overrides.helpIcon2}
                              className={classNames(
                                projectcss.all,
                                sty.helpIcon2
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__gPl9)}
                                displayHeight={"16px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"16px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/admin_panel/images/helpCircle2.svg",
                                  fullWidth: 16,
                                  fullHeight: 16,
                                  aspectRatio: 1
                                }}
                              />
                            </div>
                          ) : null}
                        </Stack__>
                      </Stack__>
                      {false ? (
                        <div
                          data-plasmic-name={"hintText2"}
                          data-plasmic-override={overrides.hintText2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.hintText2
                          )}
                        >
                          {"This is a hint text to help user."}
                        </div>
                      ) : null}
                    </Stack__>
                  </Stack__>
                  <div
                    data-plasmic-name={"row"}
                    data-plasmic-override={overrides.row}
                    className={classNames(projectcss.all, sty.row)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"checkbox"}
                      data-plasmic-override={overrides.checkbox}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.checkbox)}
                    >
                      <div
                        data-plasmic-name={"input3"}
                        data-plasmic-override={overrides.input3}
                        className={classNames(projectcss.all, sty.input3)}
                      >
                        <div
                          data-plasmic-name={"checkboxBase"}
                          data-plasmic-override={overrides.checkboxBase}
                          className={classNames(
                            projectcss.all,
                            sty.checkboxBase
                          )}
                        />
                      </div>
                      <div
                        data-plasmic-name={"textAndSupportingText2"}
                        data-plasmic-override={overrides.textAndSupportingText2}
                        className={classNames(
                          projectcss.all,
                          sty.textAndSupportingText2
                        )}
                      >
                        <div
                          data-plasmic-name={"text14"}
                          data-plasmic-override={overrides.text14}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text14
                          )}
                        >
                          {"Remember for 30 days"}
                        </div>
                        {false ? (
                          <div
                            data-plasmic-name={"supportingText2"}
                            data-plasmic-override={overrides.supportingText2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.supportingText2
                            )}
                          >
                            {"Save my login details for next time."}
                          </div>
                        ) : null}
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"buttonsButton"}
                      data-plasmic-override={overrides.buttonsButton}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.buttonsButton)}
                    >
                      {false ? (
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__kgJPy)}
                          displayHeight={"20px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"20px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/admin_panel/images/placeholder.svg",
                            fullWidth: 20,
                            fullHeight: 20,
                            aspectRatio: 1
                          }}
                        />
                      ) : null}
                      <div
                        data-plasmic-name={"text15"}
                        data-plasmic-override={overrides.text15}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text15
                        )}
                      >
                        {"Forgot password"}
                      </div>
                      {false ? (
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___7VvIl)}
                          displayHeight={"20px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"20px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/admin_panel/images/placeholder2.svg",
                            fullWidth: 20,
                            fullHeight: 20,
                            aspectRatio: 1
                          }}
                        />
                      ) : null}
                    </Stack__>
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"actions"}
                    data-plasmic-override={overrides.actions}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.actions)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"buttonsButton2"}
                      data-plasmic-override={overrides.buttonsButton2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.buttonsButton2)}
                    >
                      {false ? (
                        <Placeholder3Icon
                          className={classNames(projectcss.all, sty.svg__y4Es0)}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        data-plasmic-name={"textPadding"}
                        data-plasmic-override={overrides.textPadding}
                        className={classNames(projectcss.all, sty.textPadding)}
                      >
                        <div
                          data-plasmic-name={"text16"}
                          data-plasmic-override={overrides.text16}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text16
                          )}
                        >
                          {"Sign in"}
                        </div>
                      </div>
                      {false ? (
                        <Placeholder3Icon
                          className={classNames(projectcss.all, sty.svg__xk47)}
                          role={"img"}
                        />
                      ) : null}
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"socialButtonGroups"}
                      data-plasmic-override={overrides.socialButtonGroups}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.socialButtonGroups
                      )}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"socialButton"}
                        data-plasmic-override={overrides.socialButton}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.socialButton)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__e9QB)}
                          displayHeight={"24px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"24px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/admin_panel/images/socialIcon.svg",
                            fullWidth: 24,
                            fullHeight: 24,
                            aspectRatio: 1
                          }}
                        />

                        <div
                          data-plasmic-name={"text17"}
                          data-plasmic-override={overrides.text17}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text17
                          )}
                        >
                          {"Sign in with Google"}
                        </div>
                      </Stack__>
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"socialButton2"}
                          data-plasmic-override={overrides.socialButton2}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.socialButton2
                          )}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__wiX8)}
                            displayHeight={"24px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"24px"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/admin_panel/images/socialIcon2.svg",
                              fullWidth: 24,
                              fullHeight: 24,
                              aspectRatio: 1
                            }}
                          />

                          <div
                            data-plasmic-name={"text18"}
                            data-plasmic-override={overrides.text18}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text18
                            )}
                          >
                            {"Sign in with Facebook"}
                          </div>
                        </Stack__>
                      ) : null}
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"socialButton3"}
                          data-plasmic-override={overrides.socialButton3}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.socialButton3
                          )}
                        >
                          <SocialIcon3Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__rFss
                            )}
                            role={"img"}
                          />

                          <div
                            data-plasmic-name={"text19"}
                            data-plasmic-override={overrides.text19}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text19
                            )}
                          >
                            {"Sign in with Apple"}
                          </div>
                        </Stack__>
                      ) : null}
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"socialButton4"}
                          data-plasmic-override={overrides.socialButton4}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.socialButton4
                          )}
                        >
                          <SocialIcon4Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___2KpAm
                            )}
                            role={"img"}
                          />

                          <div
                            data-plasmic-name={"text20"}
                            data-plasmic-override={overrides.text20}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text20
                            )}
                          >
                            {"Sign in with X"}
                          </div>
                        </Stack__>
                      ) : null}
                    </Stack__>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"row2"}
                  data-plasmic-override={overrides.row2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.row2)}
                >
                  <div
                    data-plasmic-name={"text21"}
                    data-plasmic-override={overrides.text21}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text21
                    )}
                  >
                    {"Don\u2019t have an account?"}
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"buttonsButton3"}
                    data-plasmic-override={overrides.buttonsButton3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.buttonsButton3)}
                  >
                    {false ? (
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__j0ZdT)}
                        displayHeight={"20px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"20px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/admin_panel/images/placeholder4.svg",
                          fullWidth: 20,
                          fullHeight: 20,
                          aspectRatio: 1
                        }}
                      />
                    ) : null}
                    <div
                      data-plasmic-name={"text22"}
                      data-plasmic-override={overrides.text22}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text22
                      )}
                    >
                      {"Sign up"}
                    </div>
                    {false ? (
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___8ITm9)}
                        displayHeight={"20px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"20px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/admin_panel/images/placeholder5.svg",
                          fullWidth: 20,
                          fullHeight: 20,
                          aspectRatio: 1
                        }}
                      />
                    ) : null}
                  </Stack__>
                </Stack__>
              </Stack__>
            </Stack__>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "logIn",
    "backgroundPatternDecorative",
    "content",
    "lines",
    "container",
    "content2",
    "header",
    "logomark",
    "content3",
    "blur",
    "textAndSupportingText",
    "text",
    "supportingText",
    "horizontalTabs",
    "tabButtonBase",
    "text2",
    "badge",
    "text3",
    "tabButtonBase2",
    "text4",
    "badge2",
    "text5",
    "tabButtonBase3",
    "text6",
    "badge3",
    "text7",
    "tabButtonBase4",
    "text8",
    "badge4",
    "text9",
    "tabButtonBase5",
    "text10",
    "badge5",
    "text11",
    "content4",
    "form",
    "inputField",
    "inputWithLabel",
    "labelWrapper",
    "label",
    "asterisk",
    "input",
    "content5",
    "text12",
    "helpIcon",
    "hintText",
    "inputField2",
    "inputWithLabel2",
    "labelWrapper2",
    "label2",
    "asterisk2",
    "input2",
    "content6",
    "text13",
    "helpIcon2",
    "hintText2",
    "row",
    "checkbox",
    "input3",
    "checkboxBase",
    "textAndSupportingText2",
    "text14",
    "supportingText2",
    "buttonsButton",
    "text15",
    "actions",
    "buttonsButton2",
    "textPadding",
    "text16",
    "socialButtonGroups",
    "socialButton",
    "text17",
    "socialButton2",
    "text18",
    "socialButton3",
    "text19",
    "socialButton4",
    "text20",
    "row2",
    "text21",
    "buttonsButton3",
    "text22"
  ],
  logIn: [
    "logIn",
    "backgroundPatternDecorative",
    "content",
    "lines",
    "container",
    "content2",
    "header",
    "logomark",
    "content3",
    "blur",
    "textAndSupportingText",
    "text",
    "supportingText",
    "horizontalTabs",
    "tabButtonBase",
    "text2",
    "badge",
    "text3",
    "tabButtonBase2",
    "text4",
    "badge2",
    "text5",
    "tabButtonBase3",
    "text6",
    "badge3",
    "text7",
    "tabButtonBase4",
    "text8",
    "badge4",
    "text9",
    "tabButtonBase5",
    "text10",
    "badge5",
    "text11",
    "content4",
    "form",
    "inputField",
    "inputWithLabel",
    "labelWrapper",
    "label",
    "asterisk",
    "input",
    "content5",
    "text12",
    "helpIcon",
    "hintText",
    "inputField2",
    "inputWithLabel2",
    "labelWrapper2",
    "label2",
    "asterisk2",
    "input2",
    "content6",
    "text13",
    "helpIcon2",
    "hintText2",
    "row",
    "checkbox",
    "input3",
    "checkboxBase",
    "textAndSupportingText2",
    "text14",
    "supportingText2",
    "buttonsButton",
    "text15",
    "actions",
    "buttonsButton2",
    "textPadding",
    "text16",
    "socialButtonGroups",
    "socialButton",
    "text17",
    "socialButton2",
    "text18",
    "socialButton3",
    "text19",
    "socialButton4",
    "text20",
    "row2",
    "text21",
    "buttonsButton3",
    "text22"
  ],
  backgroundPatternDecorative: [
    "backgroundPatternDecorative",
    "content",
    "lines"
  ],
  content: ["content", "lines"],
  lines: ["lines"],
  container: [
    "container",
    "content2",
    "header",
    "logomark",
    "content3",
    "blur",
    "textAndSupportingText",
    "text",
    "supportingText",
    "horizontalTabs",
    "tabButtonBase",
    "text2",
    "badge",
    "text3",
    "tabButtonBase2",
    "text4",
    "badge2",
    "text5",
    "tabButtonBase3",
    "text6",
    "badge3",
    "text7",
    "tabButtonBase4",
    "text8",
    "badge4",
    "text9",
    "tabButtonBase5",
    "text10",
    "badge5",
    "text11",
    "content4",
    "form",
    "inputField",
    "inputWithLabel",
    "labelWrapper",
    "label",
    "asterisk",
    "input",
    "content5",
    "text12",
    "helpIcon",
    "hintText",
    "inputField2",
    "inputWithLabel2",
    "labelWrapper2",
    "label2",
    "asterisk2",
    "input2",
    "content6",
    "text13",
    "helpIcon2",
    "hintText2",
    "row",
    "checkbox",
    "input3",
    "checkboxBase",
    "textAndSupportingText2",
    "text14",
    "supportingText2",
    "buttonsButton",
    "text15",
    "actions",
    "buttonsButton2",
    "textPadding",
    "text16",
    "socialButtonGroups",
    "socialButton",
    "text17",
    "socialButton2",
    "text18",
    "socialButton3",
    "text19",
    "socialButton4",
    "text20",
    "row2",
    "text21",
    "buttonsButton3",
    "text22"
  ],
  content2: [
    "content2",
    "header",
    "logomark",
    "content3",
    "blur",
    "textAndSupportingText",
    "text",
    "supportingText",
    "horizontalTabs",
    "tabButtonBase",
    "text2",
    "badge",
    "text3",
    "tabButtonBase2",
    "text4",
    "badge2",
    "text5",
    "tabButtonBase3",
    "text6",
    "badge3",
    "text7",
    "tabButtonBase4",
    "text8",
    "badge4",
    "text9",
    "tabButtonBase5",
    "text10",
    "badge5",
    "text11",
    "content4",
    "form",
    "inputField",
    "inputWithLabel",
    "labelWrapper",
    "label",
    "asterisk",
    "input",
    "content5",
    "text12",
    "helpIcon",
    "hintText",
    "inputField2",
    "inputWithLabel2",
    "labelWrapper2",
    "label2",
    "asterisk2",
    "input2",
    "content6",
    "text13",
    "helpIcon2",
    "hintText2",
    "row",
    "checkbox",
    "input3",
    "checkboxBase",
    "textAndSupportingText2",
    "text14",
    "supportingText2",
    "buttonsButton",
    "text15",
    "actions",
    "buttonsButton2",
    "textPadding",
    "text16",
    "socialButtonGroups",
    "socialButton",
    "text17",
    "socialButton2",
    "text18",
    "socialButton3",
    "text19",
    "socialButton4",
    "text20",
    "row2",
    "text21",
    "buttonsButton3",
    "text22"
  ],
  header: [
    "header",
    "logomark",
    "content3",
    "blur",
    "textAndSupportingText",
    "text",
    "supportingText",
    "horizontalTabs",
    "tabButtonBase",
    "text2",
    "badge",
    "text3",
    "tabButtonBase2",
    "text4",
    "badge2",
    "text5",
    "tabButtonBase3",
    "text6",
    "badge3",
    "text7",
    "tabButtonBase4",
    "text8",
    "badge4",
    "text9",
    "tabButtonBase5",
    "text10",
    "badge5",
    "text11"
  ],
  logomark: ["logomark", "content3", "blur"],
  content3: ["content3", "blur"],
  blur: ["blur"],
  textAndSupportingText: ["textAndSupportingText", "text", "supportingText"],
  text: ["text"],
  supportingText: ["supportingText"],
  horizontalTabs: [
    "horizontalTabs",
    "tabButtonBase",
    "text2",
    "badge",
    "text3",
    "tabButtonBase2",
    "text4",
    "badge2",
    "text5",
    "tabButtonBase3",
    "text6",
    "badge3",
    "text7",
    "tabButtonBase4",
    "text8",
    "badge4",
    "text9",
    "tabButtonBase5",
    "text10",
    "badge5",
    "text11"
  ],
  tabButtonBase: ["tabButtonBase", "text2", "badge", "text3"],
  text2: ["text2"],
  badge: ["badge", "text3"],
  text3: ["text3"],
  tabButtonBase2: ["tabButtonBase2", "text4", "badge2", "text5"],
  text4: ["text4"],
  badge2: ["badge2", "text5"],
  text5: ["text5"],
  tabButtonBase3: ["tabButtonBase3", "text6", "badge3", "text7"],
  text6: ["text6"],
  badge3: ["badge3", "text7"],
  text7: ["text7"],
  tabButtonBase4: ["tabButtonBase4", "text8", "badge4", "text9"],
  text8: ["text8"],
  badge4: ["badge4", "text9"],
  text9: ["text9"],
  tabButtonBase5: ["tabButtonBase5", "text10", "badge5", "text11"],
  text10: ["text10"],
  badge5: ["badge5", "text11"],
  text11: ["text11"],
  content4: [
    "content4",
    "form",
    "inputField",
    "inputWithLabel",
    "labelWrapper",
    "label",
    "asterisk",
    "input",
    "content5",
    "text12",
    "helpIcon",
    "hintText",
    "inputField2",
    "inputWithLabel2",
    "labelWrapper2",
    "label2",
    "asterisk2",
    "input2",
    "content6",
    "text13",
    "helpIcon2",
    "hintText2",
    "row",
    "checkbox",
    "input3",
    "checkboxBase",
    "textAndSupportingText2",
    "text14",
    "supportingText2",
    "buttonsButton",
    "text15",
    "actions",
    "buttonsButton2",
    "textPadding",
    "text16",
    "socialButtonGroups",
    "socialButton",
    "text17",
    "socialButton2",
    "text18",
    "socialButton3",
    "text19",
    "socialButton4",
    "text20"
  ],
  form: [
    "form",
    "inputField",
    "inputWithLabel",
    "labelWrapper",
    "label",
    "asterisk",
    "input",
    "content5",
    "text12",
    "helpIcon",
    "hintText",
    "inputField2",
    "inputWithLabel2",
    "labelWrapper2",
    "label2",
    "asterisk2",
    "input2",
    "content6",
    "text13",
    "helpIcon2",
    "hintText2"
  ],
  inputField: [
    "inputField",
    "inputWithLabel",
    "labelWrapper",
    "label",
    "asterisk",
    "input",
    "content5",
    "text12",
    "helpIcon",
    "hintText"
  ],
  inputWithLabel: [
    "inputWithLabel",
    "labelWrapper",
    "label",
    "asterisk",
    "input",
    "content5",
    "text12",
    "helpIcon"
  ],
  labelWrapper: ["labelWrapper", "label", "asterisk"],
  label: ["label"],
  asterisk: ["asterisk"],
  input: ["input", "content5", "text12", "helpIcon"],
  content5: ["content5", "text12"],
  text12: ["text12"],
  helpIcon: ["helpIcon"],
  hintText: ["hintText"],
  inputField2: [
    "inputField2",
    "inputWithLabel2",
    "labelWrapper2",
    "label2",
    "asterisk2",
    "input2",
    "content6",
    "text13",
    "helpIcon2",
    "hintText2"
  ],
  inputWithLabel2: [
    "inputWithLabel2",
    "labelWrapper2",
    "label2",
    "asterisk2",
    "input2",
    "content6",
    "text13",
    "helpIcon2"
  ],
  labelWrapper2: ["labelWrapper2", "label2", "asterisk2"],
  label2: ["label2"],
  asterisk2: ["asterisk2"],
  input2: ["input2", "content6", "text13", "helpIcon2"],
  content6: ["content6", "text13"],
  text13: ["text13"],
  helpIcon2: ["helpIcon2"],
  hintText2: ["hintText2"],
  row: [
    "row",
    "checkbox",
    "input3",
    "checkboxBase",
    "textAndSupportingText2",
    "text14",
    "supportingText2",
    "buttonsButton",
    "text15"
  ],
  checkbox: [
    "checkbox",
    "input3",
    "checkboxBase",
    "textAndSupportingText2",
    "text14",
    "supportingText2"
  ],
  input3: ["input3", "checkboxBase"],
  checkboxBase: ["checkboxBase"],
  textAndSupportingText2: [
    "textAndSupportingText2",
    "text14",
    "supportingText2"
  ],
  text14: ["text14"],
  supportingText2: ["supportingText2"],
  buttonsButton: ["buttonsButton", "text15"],
  text15: ["text15"],
  actions: [
    "actions",
    "buttonsButton2",
    "textPadding",
    "text16",
    "socialButtonGroups",
    "socialButton",
    "text17",
    "socialButton2",
    "text18",
    "socialButton3",
    "text19",
    "socialButton4",
    "text20"
  ],
  buttonsButton2: ["buttonsButton2", "textPadding", "text16"],
  textPadding: ["textPadding", "text16"],
  text16: ["text16"],
  socialButtonGroups: [
    "socialButtonGroups",
    "socialButton",
    "text17",
    "socialButton2",
    "text18",
    "socialButton3",
    "text19",
    "socialButton4",
    "text20"
  ],
  socialButton: ["socialButton", "text17"],
  text17: ["text17"],
  socialButton2: ["socialButton2", "text18"],
  text18: ["text18"],
  socialButton3: ["socialButton3", "text19"],
  text19: ["text19"],
  socialButton4: ["socialButton4", "text20"],
  text20: ["text20"],
  row2: ["row2", "text21", "buttonsButton3", "text22"],
  text21: ["text21"],
  buttonsButton3: ["buttonsButton3", "text22"],
  text22: ["text22"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  logIn: "div";
  backgroundPatternDecorative: "div";
  content: "div";
  lines: "div";
  container: "div";
  content2: "div";
  header: "div";
  logomark: "div";
  content3: "div";
  blur: "div";
  textAndSupportingText: "div";
  text: "div";
  supportingText: "div";
  horizontalTabs: "div";
  tabButtonBase: "div";
  text2: "div";
  badge: "div";
  text3: "div";
  tabButtonBase2: "div";
  text4: "div";
  badge2: "div";
  text5: "div";
  tabButtonBase3: "div";
  text6: "div";
  badge3: "div";
  text7: "div";
  tabButtonBase4: "div";
  text8: "div";
  badge4: "div";
  text9: "div";
  tabButtonBase5: "div";
  text10: "div";
  badge5: "div";
  text11: "div";
  content4: "div";
  form: "div";
  inputField: "div";
  inputWithLabel: "div";
  labelWrapper: "div";
  label: "div";
  asterisk: "div";
  input: "div";
  content5: "div";
  text12: "div";
  helpIcon: "div";
  hintText: "div";
  inputField2: "div";
  inputWithLabel2: "div";
  labelWrapper2: "div";
  label2: "div";
  asterisk2: "div";
  input2: "div";
  content6: "div";
  text13: "div";
  helpIcon2: "div";
  hintText2: "div";
  row: "div";
  checkbox: "div";
  input3: "div";
  checkboxBase: "div";
  textAndSupportingText2: "div";
  text14: "div";
  supportingText2: "div";
  buttonsButton: "div";
  text15: "div";
  actions: "div";
  buttonsButton2: "div";
  textPadding: "div";
  text16: "div";
  socialButtonGroups: "div";
  socialButton: "div";
  text17: "div";
  socialButton2: "div";
  text18: "div";
  socialButton3: "div";
  text19: "div";
  socialButton4: "div";
  text20: "div";
  row2: "div";
  text21: "div";
  buttonsButton3: "div";
  text22: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage__VariantsArgs;
    args?: PlasmicNewPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewPage__ArgProps,
          internalVariantPropNames: PlasmicNewPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage";
  } else {
    func.displayName = `PlasmicNewPage.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"c07a0400-110e-414e-b27b-d8a9e841d972"}
      appId={"77VYuwNTZafJr81o7gYYZM"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "77VYuwNTZafJr81o7gYYZM"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicNewPage = Object.assign(
  // Top-level PlasmicNewPage renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    logIn: makeNodeComponent("logIn"),
    backgroundPatternDecorative: makeNodeComponent(
      "backgroundPatternDecorative"
    ),
    content: makeNodeComponent("content"),
    lines: makeNodeComponent("lines"),
    container: makeNodeComponent("container"),
    content2: makeNodeComponent("content2"),
    header: makeNodeComponent("header"),
    logomark: makeNodeComponent("logomark"),
    content3: makeNodeComponent("content3"),
    blur: makeNodeComponent("blur"),
    textAndSupportingText: makeNodeComponent("textAndSupportingText"),
    text: makeNodeComponent("text"),
    supportingText: makeNodeComponent("supportingText"),
    horizontalTabs: makeNodeComponent("horizontalTabs"),
    tabButtonBase: makeNodeComponent("tabButtonBase"),
    text2: makeNodeComponent("text2"),
    badge: makeNodeComponent("badge"),
    text3: makeNodeComponent("text3"),
    tabButtonBase2: makeNodeComponent("tabButtonBase2"),
    text4: makeNodeComponent("text4"),
    badge2: makeNodeComponent("badge2"),
    text5: makeNodeComponent("text5"),
    tabButtonBase3: makeNodeComponent("tabButtonBase3"),
    text6: makeNodeComponent("text6"),
    badge3: makeNodeComponent("badge3"),
    text7: makeNodeComponent("text7"),
    tabButtonBase4: makeNodeComponent("tabButtonBase4"),
    text8: makeNodeComponent("text8"),
    badge4: makeNodeComponent("badge4"),
    text9: makeNodeComponent("text9"),
    tabButtonBase5: makeNodeComponent("tabButtonBase5"),
    text10: makeNodeComponent("text10"),
    badge5: makeNodeComponent("badge5"),
    text11: makeNodeComponent("text11"),
    content4: makeNodeComponent("content4"),
    form: makeNodeComponent("form"),
    inputField: makeNodeComponent("inputField"),
    inputWithLabel: makeNodeComponent("inputWithLabel"),
    labelWrapper: makeNodeComponent("labelWrapper"),
    label: makeNodeComponent("label"),
    asterisk: makeNodeComponent("asterisk"),
    input: makeNodeComponent("input"),
    content5: makeNodeComponent("content5"),
    text12: makeNodeComponent("text12"),
    helpIcon: makeNodeComponent("helpIcon"),
    hintText: makeNodeComponent("hintText"),
    inputField2: makeNodeComponent("inputField2"),
    inputWithLabel2: makeNodeComponent("inputWithLabel2"),
    labelWrapper2: makeNodeComponent("labelWrapper2"),
    label2: makeNodeComponent("label2"),
    asterisk2: makeNodeComponent("asterisk2"),
    input2: makeNodeComponent("input2"),
    content6: makeNodeComponent("content6"),
    text13: makeNodeComponent("text13"),
    helpIcon2: makeNodeComponent("helpIcon2"),
    hintText2: makeNodeComponent("hintText2"),
    row: makeNodeComponent("row"),
    checkbox: makeNodeComponent("checkbox"),
    input3: makeNodeComponent("input3"),
    checkboxBase: makeNodeComponent("checkboxBase"),
    textAndSupportingText2: makeNodeComponent("textAndSupportingText2"),
    text14: makeNodeComponent("text14"),
    supportingText2: makeNodeComponent("supportingText2"),
    buttonsButton: makeNodeComponent("buttonsButton"),
    text15: makeNodeComponent("text15"),
    actions: makeNodeComponent("actions"),
    buttonsButton2: makeNodeComponent("buttonsButton2"),
    textPadding: makeNodeComponent("textPadding"),
    text16: makeNodeComponent("text16"),
    socialButtonGroups: makeNodeComponent("socialButtonGroups"),
    socialButton: makeNodeComponent("socialButton"),
    text17: makeNodeComponent("text17"),
    socialButton2: makeNodeComponent("socialButton2"),
    text18: makeNodeComponent("text18"),
    socialButton3: makeNodeComponent("socialButton3"),
    text19: makeNodeComponent("text19"),
    socialButton4: makeNodeComponent("socialButton4"),
    text20: makeNodeComponent("text20"),
    row2: makeNodeComponent("row2"),
    text21: makeNodeComponent("text21"),
    buttonsButton3: makeNodeComponent("buttonsButton3"),
    text22: makeNodeComponent("text22"),

    // Metadata about props expected for PlasmicNewPage
    internalVariantProps: PlasmicNewPage__VariantProps,
    internalArgProps: PlasmicNewPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPage;
/* prettier-ignore-end */
